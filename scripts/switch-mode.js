#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

const modes = {
  local: {
    name: '–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–ø–æ–ª–Ω–∞—è)',
    file: 'env.example',
    description: 'Strapi + Next.js –ª–æ–∫–∞–ª—å–Ω–æ'
  },
  vps: {
    name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å VPS Strapi',
    file: 'env.local.example', 
    description: '–¢–æ–ª—å–∫–æ Next.js –ª–æ–∫–∞–ª—å–Ω–æ, Strapi –Ω–∞ VPS'
  }
}

function showHelp() {
  console.log('üîÑ PBN Manager - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n')
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:')
  
  Object.entries(modes).forEach(([key, mode]) => {
    console.log(`  ${key}: ${mode.name}`)
    console.log(`     ${mode.description}`)
  })
  
  console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')
  console.log('  node scripts/switch-mode.js <—Ä–µ–∂–∏–º>')
  console.log('  node scripts/switch-mode.js local')
  console.log('  node scripts/switch-mode.js vps')
}

function switchMode(modeKey) {
  if (!modes[modeKey]) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ${modeKey}`)
    showHelp()
    process.exit(1)
  }

  const mode = modes[modeKey]
  const sourceFile = path.join(process.cwd(), mode.file)
  const targetFile = path.join(process.cwd(), '.env')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(sourceFile)) {
      console.error(`‚ùå –§–∞–π–ª ${mode.file} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      process.exit(1)
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    fs.copyFileSync(sourceFile, targetFile)
    
    console.log(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: ${mode.name}`)
    console.log(`üìù –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ ${mode.file}`)
    console.log(`üí° ${mode.description}`)
    
    if (modeKey === 'vps') {
      console.log('\nüîß –ù–µ –∑–∞–±—É–¥—å—Ç–µ:')
      console.log('1. –£–∫–∞–∑–∞—Ç—å IP –≤–∞—à–µ–≥–æ VPS –≤ .env')
      console.log('2. –ü–æ–ª—É—á–∏—Ç—å API —Ç–æ–∫–µ–Ω –∏–∑ Strapi –∞–¥–º–∏–Ω–∫–∏')
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å: npm run dev')
    } else {
      console.log('\nüîß –ù–µ –∑–∞–±—É–¥—å—Ç–µ:')
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å Strapi: cd strapi && npm run develop')
      console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç—å Next.js: npm run dev')
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞:`, error.message)
    process.exit(1)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2)

if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
  showHelp()
} else {
  const mode = args[0]
  switchMode(mode)
} 