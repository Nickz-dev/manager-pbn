#!/usr/bin/env node

const { execSync } = require('child_process');

console.log('üß™ Comprehensive AI Generation Testing...');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const testScenarios = [
  {
    name: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–Ω–∏–∑–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)',
    params: {
      prompt: '–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ª—É—á—à–∏—Ö –æ–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
      temperature: 0.3,
      max_tokens: 2000,
      top_p: 0.8,
      store_logs: true
    },
    expected: 'JSON —Å title, excerpt, content'
  },
  {
    name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–≤—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)',
    params: {
      prompt: '–ù–∞–ø–∏—à–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –æ–±–∑–æ—Ä –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç-–∏–≥—Ä —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏',
      temperature: 1.2,
      max_tokens: 3000,
      top_p: 0.95,
      store_logs: true
    },
    expected: 'JSON —Å title, excerpt, content'
  },
  {
    name: '–î–ª–∏–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è (–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤)',
    params: {
      prompt: '–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
      temperature: 0.7,
      max_tokens: 6000,
      top_p: 0.9,
      store_logs: true
    },
    expected: 'JSON —Å title, excerpt, content'
  },
  {
    name: '–§–æ–∫—É—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–Ω–∏–∑–∫–∏–π top_p)',
    params: {
      prompt: '–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä RTP –≤ –æ–Ω–ª–∞–π–Ω —Å–ª–æ—Ç–∞—Ö',
      temperature: 0.5,
      max_tokens: 2500,
      top_p: 0.3,
      store_logs: true
    },
    expected: 'JSON —Å title, excerpt, content'
  },
  {
    name: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Å—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)',
    params: {
      prompt: '–°–æ–∑–¥–∞–π –æ–±–∑–æ—Ä —Ç–æ–ø-10 –∫–∞–∑–∏–Ω–æ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π –≤ 2024 –≥–æ–¥—É',
      temperature: 0.7,
      max_tokens: 4000,
      top_p: 0.9,
      store_logs: true
    },
    expected: 'JSON —Å title, excerpt, content'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
function validateJSONResponse(text) {
  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    let cleanText = text.trim()
      .replace(/^```json\s*/, '')
      .replace(/```\s*$/, '')
      .replace(/^```\s*/, '')
      .replace(/```\s*$/, '');
    
    // –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç
    const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      cleanText = jsonMatch[0];
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    const parsed = JSON.parse(cleanText);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const hasTitle = parsed.title && typeof parsed.title === 'string';
    const hasContent = parsed.content && typeof parsed.content === 'string';
    const hasExcerpt = parsed.excerpt && typeof parsed.excerpt === 'string';
    
    return {
      isValid: hasTitle && hasContent,
      hasTitle,
      hasContent,
      hasExcerpt,
      hasMetaTitle: parsed.meta_title && typeof parsed.meta_title === 'string',
      hasMetaDescription: parsed.meta_description && typeof parsed.meta_description === 'string',
      titleLength: parsed.title?.length || 0,
      contentLength: parsed.content?.length || 0,
      excerptLength: parsed.excerpt?.length || 0
    };
  } catch (error) {
    return {
      isValid: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
async function testScenario(scenario, index) {
  console.log(`\nüìù –¢–µ—Å—Ç ${index + 1}/${testScenarios.length}: ${scenario.name}`);
  console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, scenario.params);
  
  try {
    const response = await fetch('http://localhost:3000/api/test-ai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(scenario.params),
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${data.generatedText?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${data.usage?.total_tokens || 0}`);
      console.log(`   - –ú–æ–¥–µ–ª—å: ${data.model}`);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
      const validation = validateJSONResponse(data.generatedText);
      
      if (validation.isValid) {
        console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
        console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`);
        console.log(`   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${validation.titleLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   - –ö–æ–Ω—Ç–µ–Ω—Ç: ${validation.contentLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${validation.excerptLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   - Meta title: ${validation.hasMetaTitle ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Meta description: ${validation.hasMetaDescription ? '‚úÖ' : '‚ùå'}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–∞–≥–æ–ª–æ–≤–∫–∞
        try {
          const parsed = JSON.parse(data.generatedText.replace(/^```json\s*/, '').replace(/```\s*$/, ''));
          console.log(`üìù –ü—Ä–µ–≤—å—é –∑–∞–≥–æ–ª–æ–≤–∫–∞: "${parsed.title?.substring(0, 60)}..."`);
        } catch (e) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∑–∞–≥–æ–ª–æ–≤–∫–∞');
        }
      } else {
        console.log('‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è');
        console.log(`   –û—à–∏–±–∫–∞: ${validation.error}`);
        console.log(`   –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞: ${data.generatedText?.substring(0, 200)}...`);
      }
      
      return {
        success: true,
        validation,
        usage: data.usage,
        model: data.model
      };
    } else {
      console.log('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è');
      console.log(`   –û—à–∏–±–∫–∞: ${data.error}`);
      return {
        success: false,
        error: data.error
      };
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runComprehensiveTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
  
  const results = [];
  let successCount = 0;
  let jsonSuccessCount = 0;
  
  for (let i = 0; i < testScenarios.length; i++) {
    const result = await testScenario(testScenarios[i], i);
    results.push(result);
    
    if (result.success) {
      successCount++;
      if (result.validation?.isValid) {
        jsonSuccessCount++;
      }
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (i < testScenarios.length - 1) {
      console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log('='.repeat(50));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successCount}/${testScenarios.length}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö JSON –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: ${jsonSuccessCount}/${testScenarios.length}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / testScenarios.length) * 100).toFixed(1)}%`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${((jsonSuccessCount / testScenarios.length) * 100).toFixed(1)}%`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
  const totalTokens = results
    .filter(r => r.success && r.usage)
    .reduce((sum, r) => sum + (r.usage.total_tokens || 0), 0);
  
  const avgTokens = totalTokens / successCount;
  console.log(`üí∞ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ${totalTokens}`);
  console.log(`üí∞ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ç–µ—Å—Ç: ${avgTokens.toFixed(0)}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (jsonSuccessCount < testScenarios.length) {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ JSON –ø–∞—Ä—Å–∏–Ω–≥');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON');
  } else {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  }
  
  if (successCount === testScenarios.length) {
    console.log('üéâ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API –Ω–µ —É–¥–∞–ª–∏—Å—å');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
try {
  execSync('curl -s http://localhost:3000 > /dev/null', { stdio: 'ignore' });
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
  runComprehensiveTest();
} catch (error) {
  console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
  process.exit(1);
}