const { spawn, execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º VPS...\n');

// –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
const templates = [
  'astro-casino-blog',
  'astro-slots-review', 
  'astro-gaming-news',
  'astro-sports-betting',
  'astro-poker-platform'
];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
function checkEnvironment() {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const envPath = path.join(__dirname, '../.env');
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const useLocalStrapi = envContent.match(/USE_LOCAL_STRAPI=(.+)/)?.[1];
  const nextPublicUseLocal = envContent.match(/NEXT_PUBLIC_USE_LOCAL_STRAPI=(.+)/)?.[1];
  const vpsAddress = envContent.match(/VPS_ADDRESS=(.+)/)?.[1];
  
  console.log(`   USE_LOCAL_STRAPI: ${useLocalStrapi || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
  console.log(`   NEXT_PUBLIC_USE_LOCAL_STRAPI: ${nextPublicUseLocal || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
  console.log(`   VPS_ADDRESS: ${vpsAddress || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
  
  if (useLocalStrapi === 'true' || nextPublicUseLocal === 'true') {
    console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –õ–û–ö–ê–õ–¨–ù–û–ï!');
    return false;
  }
  
  console.log('‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ VPS');
  return true;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
function checkTemplates() {
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤...');
  
  const templatesDir = path.join(__dirname, '../templates');
  let allGood = true;
  
  for (const template of templates) {
    const templatePath = path.join(templatesDir, template);
    
    if (!fs.existsSync(templatePath)) {
      console.log(`‚ùå –®–∞–±–ª–æ–Ω ${template} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      allGood = false;
      continue;
    }
    
    const packageJsonPath = path.join(templatePath, 'package.json');
    const nodeModulesPath = path.join(templatePath, 'node_modules');
    const distPath = path.join(templatePath, 'dist');
    const categoriesPath = path.join(templatePath, 'src/pages/categories');
    const categoryPagePath = path.join(categoriesPath, '[slug].astro');
    
    console.log(`\nüîç ${template}:`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
    if (!fs.existsSync(packageJsonPath)) {
      console.log(`   ‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      allGood = false;
    } else {
      console.log(`   ‚úÖ package.json –Ω–∞–π–¥–µ–Ω`);
      
      try {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        console.log(`   üìã –í–µ—Ä—Å–∏—è: ${packageJson.version || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageJson.dependencies || {}).length}`);
        console.log(`   üîß Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageJson.devDependencies || {}).length}`);
      } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${e.message}`);
        allGood = false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
    if (!fs.existsSync(nodeModulesPath)) {
      console.log(`   ‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      allGood = false;
    } else {
      console.log(`   ‚úÖ node_modules –Ω–∞–π–¥–µ–Ω`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º astro
      const astroPath = path.join(nodeModulesPath, 'astro');
      if (!fs.existsSync(astroPath)) {
        console.log(`   ‚ùå Astro –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        allGood = false;
      } else {
        console.log(`   ‚úÖ Astro —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rollup
      const rollupPath = path.join(nodeModulesPath, '@rollup');
      if (!fs.existsSync(rollupPath)) {
        console.log(`   ‚ùå Rollup –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        allGood = false;
      } else {
        console.log(`   ‚úÖ Rollup —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (!fs.existsSync(categoriesPath)) {
      console.log(`   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è categories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      allGood = false;
    } else {
      console.log(`   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è categories –Ω–∞–π–¥–µ–Ω–∞`);
      
      if (!fs.existsSync(categoryPagePath)) {
        console.log(`   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π [slug].astro –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        allGood = false;
      } else {
        console.log(`   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º dist
    if (!fs.existsSync(distPath)) {
      console.log(`   ‚ùå dist –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Å–∞–π—Ç –Ω–µ —Å–æ–±—Ä–∞–Ω)`);
    } else {
      console.log(`   ‚úÖ dist –ø–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ dist
      try {
        const distFiles = fs.readdirSync(distPath);
        const htmlFiles = distFiles.filter(f => f.endsWith('.html'));
        const categoryDirs = distFiles.filter(f => {
          const categoryPath = path.join(distPath, f);
          return fs.statSync(categoryPath).isDirectory() && f === 'categories';
        });
        
        console.log(`   üìÑ HTML —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
        
        if (categoryDirs.length > 0) {
          const categoriesDistPath = path.join(distPath, 'categories');
          const categoryFiles = fs.readdirSync(categoriesDistPath);
          console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ dist: ${categoryFiles.length}`);
        }
        
        if (htmlFiles.length === 0) {
          console.log(`   ‚ö†Ô∏è  –ù–µ—Ç HTML —Ñ–∞–π–ª–æ–≤ –≤ dist`);
        }
      } catch (e) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è dist: ${e.message}`);
      }
    }
  }
  
  return allGood;
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É
async function testBuild() {
  console.log('\nüî® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏...');
  
  const templatePath = path.join(__dirname, '../templates/astro-gaming-news');
  
  if (!fs.existsSync(templatePath)) {
    console.log('‚ùå –®–∞–±–ª–æ–Ω astro-gaming-news –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞
    process.chdir(templatePath);
    
    console.log('   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Astro...');
    try {
      execSync('npx astro --version', { 
        stdio: 'pipe',
        timeout: 10000
      });
      console.log('   ‚úÖ Astro —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } catch (e) {
      console.log(`   ‚ùå Astro –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${e.message}`);
      return false;
    }
    
    console.log('   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É...');
    try {
      execSync('npm run build', { 
        stdio: 'pipe',
        timeout: 300000 // 5 –º–∏–Ω—É—Ç
      });
      console.log('   ‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const distPath = path.join(templatePath, 'dist');
      if (fs.existsSync(distPath)) {
        const files = fs.readdirSync(distPath);
        const htmlFiles = files.filter(f => f.endsWith('.html'));
        const categoryDirs = files.filter(f => {
          const categoryPath = path.join(distPath, f);
          return fs.statSync(categoryPath).isDirectory() && f === 'categories';
        });
        
        console.log(`   üìÑ –°–æ–±—Ä–∞–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
        
        if (categoryDirs.length > 0) {
          const categoriesDistPath = path.join(distPath, 'categories');
          const categoryFiles = fs.readdirSync(categoriesDistPath);
          console.log(`   üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryFiles.length}`);
        }
      }
      
      return true;
    } catch (e) {
      console.log(`   ‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${e.message}`);
      return false;
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    return false;
  } finally {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    process.chdir(path.join(__dirname, '..'));
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
async function testPreview() {
  console.log('\nüëÅÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é...');
  
  const templatePath = path.join(__dirname, '../templates/astro-gaming-news');
  
  if (!fs.existsSync(templatePath)) {
    console.log('‚ùå –®–∞–±–ª–æ–Ω astro-gaming-news –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const distPath = path.join(templatePath, 'dist');
  if (!fs.existsSync(distPath)) {
    console.log('‚ùå dist –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–∞–π—Ç');
    return false;
  }
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞
    process.chdir(templatePath);
    
    console.log('   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é –≤ —Ñ–æ–Ω–µ
    const previewProcess = spawn('npm', ['run', 'preview', '--', '--port', '4321'], {
      stdio: 'pipe',
      shell: true
    });
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
    if (previewProcess.killed) {
      console.log('   ‚ùå –ü—Ä–µ–≤—å—é –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
      return false;
    }
    
    console.log('   ‚úÖ –ü—Ä–µ–≤—å—é –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    previewProcess.kill('SIGTERM');
    
    return true;
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: ${error.message}`);
    return false;
  } finally {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    process.chdir(path.join(__dirname, '..'));
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º API
async function testAPI() {
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
  
  try {
    const axios = require('axios');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Strapi
    console.log('   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Strapi...');
    try {
      const strapiResponse = await axios.get('http://185.232.205.247:1337/api/content-articles', {
        timeout: 5000
      });
      console.log(`   ‚úÖ Strapi –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${strapiResponse.status})`);
    } catch (e) {
      console.log(`   ‚ùå Strapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Next.js
    console.log('   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Next.js...');
    try {
      const nextResponse = await axios.get('http://185.232.205.247:3000', {
        timeout: 5000
      });
      console.log(`   ‚úÖ Next.js –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${nextResponse.status})`);
    } catch (e) {
      console.log(`   ‚ùå Next.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É VPS...\n');
  
  const envOk = checkEnvironment();
  const templatesOk = checkTemplates();
  
  if (!envOk) {
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ node scripts/fix-vps-env.js');
  }
  
  if (!templatesOk) {
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ node scripts/fix-preview-deps.js');
  }
  
  const buildOk = await testBuild();
  const previewOk = await testPreview();
  
  await testAPI();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
  console.log(`   –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${envOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –®–∞–±–ª–æ–Ω—ã: ${templatesOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –°–±–æ—Ä–∫–∞: ${buildOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –ü—Ä–µ–≤—å—é: ${previewOk ? '‚úÖ' : '‚ùå'}`);
  
  if (envOk && templatesOk && buildOk && previewOk) {
    console.log('\nüéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } else {
    console.log('\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º');
    console.log('\nüí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('1. node scripts/fix-vps-env.js');
    console.log('2. node scripts/fix-preview-deps.js');
    console.log('3. node scripts/restart-vps.js');
  }
}

main().catch(error => {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}); 