const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ VPS...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
const envPath = path.join(__dirname, '../.env');
if (!fs.existsSync(envPath)) {
  console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf8');
const useLocalStrapi = envContent.match(/USE_LOCAL_STRAPI=(.+)/)?.[1];
const nextPublicUseLocal = envContent.match(/NEXT_PUBLIC_USE_LOCAL_STRAPI=(.+)/)?.[1];
const vpsAddress = envContent.match(/VPS_ADDRESS=(.+)/)?.[1];

console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
console.log(`   USE_LOCAL_STRAPI: ${useLocalStrapi || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
console.log(`   NEXT_PUBLIC_USE_LOCAL_STRAPI: ${nextPublicUseLocal || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
console.log(`   VPS_ADDRESS: ${vpsAddress || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);

if (useLocalStrapi === 'true' || nextPublicUseLocal === 'true') {
  console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –õ–û–ö–ê–õ–¨–ù–û–ï!');
  console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: node scripts/fix-vps-env.js');
  process.exit(1);
}

console.log('\n‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ VPS');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
function runCommand(command, args, cwd, name) {
  return new Promise((resolve, reject) => {
    console.log(`\nüîÑ –ó–∞–ø—É—Å–∫: ${name}`);
    console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${command} ${args.join(' ')}`);
    
    const child = spawn(command, args, {
      cwd: cwd || process.cwd(),
      stdio: 'pipe',
      shell: true
    });

    child.stdout.on('data', (data) => {
      console.log(`   ${data.toString().trim()}`);
    });

    child.stderr.on('data', (data) => {
      console.log(`   ‚ùå ${data.toString().trim()}`);
    });

    child.on('close', (code) => {
      if (code === 0) {
        console.log(`   ‚úÖ ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        resolve();
      } else {
        console.log(`   ‚ùå ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
        reject(new Error(`Command failed with code ${code}`));
      }
    });

    child.on('error', (error) => {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}: ${error.message}`);
      reject(error);
    });
  });
}

async function restartServices() {
  try {
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

    // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã)
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    try {
      await runCommand('pkill', ['-f', 'next'], process.cwd(), '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Next.js');
    } catch (e) {
      console.log('   ‚ÑπÔ∏è  Next.js –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }

    try {
      await runCommand('pkill', ['-f', 'strapi'], process.cwd(), '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Strapi');
    } catch (e) {
      console.log('   ‚ÑπÔ∏è  Strapi –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º Strapi
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ Strapi...');
    const strapiProcess = spawn('npm', ['run', 'develop'], {
      cwd: path.join(process.cwd(), 'strapi'),
      stdio: 'pipe',
      shell: true
    });

    strapiProcess.stdout.on('data', (data) => {
      console.log(`   Strapi: ${data.toString().trim()}`);
    });

    strapiProcess.stderr.on('data', (data) => {
      console.log(`   Strapi ‚ùå: ${data.toString().trim()}`);
    });

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Strapi
    await new Promise(resolve => setTimeout(resolve, 5000));

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º Next.js
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ Next.js...');
    const nextProcess = spawn('npm', ['run', 'dev'], {
      cwd: process.cwd(),
      stdio: 'pipe',
      shell: true
    });

    nextProcess.stdout.on('data', (data) => {
      console.log(`   Next.js: ${data.toString().trim()}`);
    });

    nextProcess.stderr.on('data', (data) => {
      console.log(`   Next.js ‚ùå: ${data.toString().trim()}`);
    });

    console.log('\n‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!');
    console.log('\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:');
    console.log('   - Strapi: http://185.232.205.247:1337');
    console.log('   - Next.js: http://185.232.205.247:3000');
    console.log('   - Strapi Admin: http://185.232.205.247:1337/admin');

    console.log('\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
      strapiProcess.kill();
      nextProcess.kill();
      process.exit(0);
    });

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:', error.message);
    process.exit(1);
  }
}

restartServices(); 