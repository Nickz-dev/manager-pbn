#!/usr/bin/env node

const { execSync } = require('child_process');

console.log('‚ö° Quick AI Generation Test...');

const quickTest = {
  prompt: '–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ç–æ–ø-5 –æ–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
  temperature: 0.7,
  max_tokens: 2000,
  top_p: 0.9,
  store_logs: true
};

async function runQuickTest() {
  console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:', quickTest.prompt);
  console.log('‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', quickTest);
  
  try {
    const response = await fetch('http://localhost:3000/api/test-ai', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(quickTest),
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${data.generatedText?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${data.usage?.total_tokens || 0}`);
      console.log(`   - –ú–æ–¥–µ–ª—å: ${data.model}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –ø–∞—Ä—Å–∏–Ω–≥
      try {
        let cleanText = data.generatedText.trim()
          .replace(/^```json\s*/, '')
          .replace(/```\s*$/, '');
        
        const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          cleanText = jsonMatch[0];
        }
        
        const parsed = JSON.parse(cleanText);
        
        console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:');
        console.log(`   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${parsed.title ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - –ö–æ–Ω—Ç–µ–Ω—Ç: ${parsed.content ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${parsed.excerpt ? '‚úÖ' : '‚ùå'}`);
        
        if (parsed.title) {
          console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${parsed.title}"`);
        }
        
        if (parsed.content) {
          console.log(`üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç: ${parsed.content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          console.log(`   –ü—Ä–µ–≤—å—é: "${parsed.content.substring(0, 100)}..."`);
        }
        
        console.log('\nüéâ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
        
      } catch (parseError) {
        console.log('\n‚ö†Ô∏è JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è');
        console.log(`   –û—à–∏–±–∫–∞: ${parseError.message}`);
        console.log(`   –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞: ${data.generatedText?.substring(0, 200)}...`);
      }
      
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è');
      console.log(`   –û—à–∏–±–∫–∞: ${data.error}`);
    }
  } catch (error) {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
try {
  execSync('curl -s http://localhost:3000 > /dev/null', { stdio: 'ignore' });
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
  runQuickTest();
} catch (error) {
  console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
  process.exit(1);
}