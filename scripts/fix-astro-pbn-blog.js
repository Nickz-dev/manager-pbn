const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ astro-pbn-blog...\n');

const templatePath = path.join(__dirname, '../templates/astro-pbn-blog');

if (!fs.existsSync(templatePath)) {
  console.log('‚ùå –®–∞–±–ª–æ–Ω astro-pbn-blog –Ω–µ –Ω–∞–π–¥–µ–Ω');
  process.exit(1);
}

async function fixAstroPbnBlog() {
  try {
    console.log('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', templatePath);
    
    // 1. –£–¥–∞–ª—è–µ–º node_modules –∏ package-lock.json
    console.log('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    
    if (fs.existsSync(path.join(templatePath, 'node_modules'))) {
      await runCommand('rm', ['-rf', 'node_modules'], templatePath, '–£–¥–∞–ª–µ–Ω–∏–µ node_modules');
    }
    
    if (fs.existsSync(path.join(templatePath, 'package-lock.json'))) {
      await runCommand('rm', ['-f', 'package-lock.json'], templatePath, '–£–¥–∞–ª–µ–Ω–∏–µ package-lock.json');
    }

    // 2. –û—á–∏—â–∞–µ–º npm –∫—ç—à
    console.log('\nüßπ –û—á–∏—â–∞–µ–º npm –∫—ç—à...');
    await runCommand('npm', ['cache', 'clean', '--force'], templatePath, '–û—á–∏—Å—Ç–∫–∞ npm –∫—ç—à–∞');

    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
    console.log('\nüì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    await runCommand('npm', ['install', '--platform=linux', '--arch=x64'], templatePath, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');

    // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rollup –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    console.log('\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rollup –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    await runCommand('npm', ['install', '@rollup/rollup-linux-x64-gnu'], templatePath, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ rollup');

    // 5. –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    console.log('\nüî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    await runCommand('npm', ['rebuild'], templatePath, '–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');

    console.log('\n‚úÖ astro-pbn-blog –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–µ–≤—å—é —Å–µ—Ä–≤–µ—Ä');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

function runCommand(command, args, cwd, name) {
  return new Promise((resolve, reject) => {
    console.log(`   üîÑ ${name}...`);
    
    const child = spawn(command, args, {
      cwd: cwd,
      stdio: 'pipe',
      shell: true
    });

    child.stdout.on('data', (data) => {
      const output = data.toString().trim();
      if (output.includes('added') || output.includes('removed') || output.includes('error')) {
        console.log(`      ${output}`);
      }
    });

    child.stderr.on('data', (data) => {
      const error = data.toString().trim();
      if (error && !error.includes('npm WARN')) {
        console.log(`      ‚ùå ${error}`);
      }
    });

    child.on('close', (code) => {
      if (code === 0) {
        console.log(`      ‚úÖ ${name} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        resolve();
      } else {
        console.log(`      ‚ùå ${name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
        reject(new Error(`Command failed with code ${code}`));
      }
    });

    child.on('error', (error) => {
      console.log(`      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${name}: ${error.message}`);
      reject(error);
    });
  });
}

fixAstroPbnBlog(); 