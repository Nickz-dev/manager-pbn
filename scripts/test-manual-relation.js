require('dotenv').config();
const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';
const API_TOKEN = process.env.STRAPI_API_TOKEN;

const client = axios.create({
  baseURL: `${STRAPI_URL}/api`,
  headers: {
    'Authorization': `Bearer ${API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testManualRelation() {
  console.log('üîó –¢–ï–°–¢ –†–£–ß–ù–û–ì–û –°–í–Ø–ó–´–í–ê–ù–ò–Ø\n');
  
  const articleDocumentId = "otrp727gpw6pkwa7ai3iql8h"; // documentId —Å—Ç–∞—Ç—å–∏ "–õ—É—á—à–∏–µ –∫–∞–∑–∏–Ω–æ 2024"
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ID 2
  const tests = [
    { name: '–ú–∞—Å—Å–∏–≤ ID', data: { content_categories: [2] } },
    { name: '–ï–¥–∏–Ω–∏—á–Ω—ã–π ID', data: { content_categories: 2 } },
    { name: '–û–±—ä–µ–∫—Ç —Å ID', data: { content_categories: { id: 2 } } },
    { name: '–ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤', data: { content_categories: [{ id: 2 }] } }
  ];
  
  for (const test of tests) {
    console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${test.name}`);
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π ID
      let response;
      try {
        response = await client.put(`/content-articles/6`, { data: test.data });
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ID');
      } catch (idError) {
        // –ï—Å–ª–∏ ID –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º documentId
        response = await client.put(`/content-articles/${articleDocumentId}`, { data: test.data });
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ documentId');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º documentId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
      const checkResponse = await client.get(`/content-articles/${articleDocumentId}?populate=content_categories`);
      const categories = checkResponse.data.data.attributes.content_categories;
      if (categories && categories.length > 0) {
        console.log(`üéâ –°–í–Ø–ó–ê–ù–û! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categories[0].attributes.name}`);
        return; // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å - –≤—ã—Ö–æ–¥–∏–º
      } else {
        console.log('‚ùå –ù–µ —Å–≤—è–∑–∞–ª–æ—Å—å - categories –ø—É—Å—Ç–æ–π');
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error?.message || error.response?.status}`);
      if (error.response?.data) {
        console.log(`   –î–µ—Ç–∞–ª–∏:`, JSON.stringify(error.response.data, null, 2));
      }
    }
  }
}

testManualRelation().catch(console.error); 