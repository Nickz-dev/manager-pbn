const axios = require('axios');
require('dotenv').config();

console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Strapi...');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL Strapi
const getStrapiUrl = () => {
  const useLocal = process.env.USE_LOCAL_STRAPI === 'true';
  return useLocal ? 'http://localhost:1337' : 'http://185.232.205.247:1337';
};

const strapiUrl = getStrapiUrl();
console.log(`üîó Strapi URL: ${strapiUrl}`);

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getStrapiToken() {
  const token = process.env.STRAPI_TOKEN;
  if (!token) {
    console.error('‚ùå STRAPI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env: STRAPI_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å');
    return null;
  }
  return token;
}

async function testConnection() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const healthResponse = await axios.get(`${strapiUrl}/_health`, {
      timeout: 5000
    });
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å —Ç–æ–∫–µ–Ω–æ–º
    const token = getStrapiToken();
    if (!token) {
      return { success: false, error: 'No token' };
    }
    
    try {
      const headers = {
        'Authorization': `Bearer ${token}`
      };
      
      const apiResponse = await axios.get(`${strapiUrl}/api/domains`, {
        headers,
        timeout: 5000
      });
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º');
      return { success: true, authRequired: false };
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
        return { success: false, error: 'Invalid token' };
      }
      if (error.response?.status === 403) {
        console.log('‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return { success: false, error: 'Access denied' };
      }
      throw error;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return { success: false, error: error.message };
  }
}

async function testDataAccess() {
  try {
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º...');
    
    const token = getStrapiToken();
    if (!token) {
      return { success: false, error: 'No token' };
    }
    
    const headers = {
      'Authorization': `Bearer ${token}`
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω–∞–º
    const domainsResponse = await axios.get(`${strapiUrl}/api/domains`, {
      headers,
      timeout: 5000
    });
    console.log(`‚úÖ –î–æ–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã (${domainsResponse.data.data.length} –∑–∞–ø–∏—Å–µ–π)`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ VPS —Å–µ—Ä–≤–µ—Ä–∞–º
    const vpsResponse = await axios.get(`${strapiUrl}/api/vps-servers`, {
      headers,
      timeout: 5000
    });
    console.log(`‚úÖ VPS —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã (${vpsResponse.data.data.length} –∑–∞–ø–∏—Å–µ–π)`);
    
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º:', error.response?.data || error.message);
    return { success: false, error: error.response?.data || error.message };
  }
}

async function main() {
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  const token = getStrapiToken();
  if (!token) {
    console.log('\n‚ùå STRAPI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env: STRAPI_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å');
    process.exit(1);
  }
  
  console.log('‚úÖ STRAPI_TOKEN –Ω–∞–π–¥–µ–Ω');
  
  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionResult = await testConnection();
  
  if (!connectionResult.success) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Strapi');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   1. Strapi –∑–∞–ø—É—â–µ–Ω');
    console.log('   2. URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
    console.log('   3. STRAPI_TOKEN –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
    console.log('   4. –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ Strapi');
    process.exit(1);
  }
  
  // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
  const dataResult = await testDataAccess();
  
  if (!dataResult.success) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞');
    process.exit(1);
  }
  
  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  console.log('üéØ Strapi –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–æ–º');
  
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   node scripts/seed-test-domains.js - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
  console.log('   node scripts/check-strapi-data.js - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}); 