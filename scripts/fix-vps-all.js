const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ VPS...\n');

// –®–∞–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const steps = [
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    script: 'check-vps-frontend.js'
  },
  {
    name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ VPS',
    script: 'fix-vps-env.js'
  },
  {
    name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–µ–≤—å—é',
    script: 'fix-preview-deps.js'
  }
];

async function runStep(step) {
  console.log(`\nüîß –®–∞–≥: ${step.name}`);
  console.log(`üìú –°–∫—Ä–∏–ø—Ç: ${step.script}`);
  
  const scriptPath = path.join(__dirname, step.script);
  
  if (!fs.existsSync(scriptPath)) {
    console.log(`‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç ${step.script} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return true;
  }
  
  return new Promise((resolve) => {
    const child = spawn('node', [scriptPath], {
      stdio: 'inherit',
      shell: true
    });
    
    child.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${step.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        resolve(true);
      } else {
        console.log(`‚ùå ${step.name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
        resolve(false);
      }
    });
    
    child.on('error', (error) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${step.name}: ${error.message}`);
      resolve(false);
    });
  });
}

async function main() {
  console.log('üìã –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  steps.forEach((step, index) => {
    console.log(`   ${index + 1}. ${step.name}`);
  });
  
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...\n');
  
  let successCount = 0;
  let totalSteps = steps.length;
  
  for (const step of steps) {
    const success = await runStep(step);
    if (success) successCount++;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalSteps}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalSteps - successCount}/${totalSteps}`);
  
  if (successCount === totalSteps) {
    console.log('\nüéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:');
    console.log('   node scripts/restart-vps.js');
    console.log('');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:');
    console.log('   - Strapi: http://185.232.205.247:1337');
    console.log('   - Next.js: http://185.232.205.247:3000');
    console.log('   - –ü—Ä–µ–≤—å—é: http://185.232.205.247:4321');
    console.log('');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:');
    console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞');
    console.log('   - –°–±–æ—Ä–∫–∞ —Å–∞–π—Ç–∞');
    console.log('   - –ü—Ä–µ–≤—å—é —Å–∞–π—Ç–∞');
    console.log('');
    console.log('4. –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! üöÄ');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ');
  }
}

main().catch(error => {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}); 