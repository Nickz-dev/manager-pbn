const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é...\n');

async function testPreview() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 4322
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 4322...');
    try {
      const netstat = execSync('netstat -tlnp | grep 4322', { encoding: 'utf8' });
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 4322:');
      console.log(netstat);
    } catch (error) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 4322');
    }

    // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã astro –Ω–∞ –ø–æ—Ä—Ç—É 4322
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã astro –Ω–∞ –ø–æ—Ä—Ç—É 4322...');
    try {
      execSync('pkill -f "astro.*4322"', { stdio: 'ignore' });
      execSync('pkill -f "npm.*preview.*4322"', { stdio: 'ignore' });
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.log('‚ÑπÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // 3. –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    console.log('\n‚è≥ –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 4322...');
    const net = await import('net');
    const isPortAvailable = await new Promise<boolean>((resolve) => {
      const server = net.createServer();
      server.listen(4322, () => {
        server.close(() => resolve(true));
      });
      server.on('error', () => {
        resolve(false);
      });
    });

    if (isPortAvailable) {
      console.log('‚úÖ –ü–æ—Ä—Ç 4322 —Å–≤–æ–±–æ–¥–µ–Ω');
    } else {
      console.log('‚ùå –ü–æ—Ä—Ç 4322 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç');
      return false;
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–µ–≤—å—é
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–µ–≤—å—é...');
    const templatePath = path.join(__dirname, '../templates/astro-pbn-blog');
    
    if (!fs.existsSync(templatePath)) {
      console.log('‚ùå –®–∞–±–ª–æ–Ω astro-pbn-blog –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dist –ø–∞–ø–∫–∏
    const distPath = path.join(templatePath, 'dist');
    if (!fs.existsSync(distPath)) {
      console.log('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç!');
      return false;
    }

    console.log('‚úÖ Dist –ø–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');

    // 6. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é –≤ —Ñ–æ–Ω–µ
    console.log('\nüéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–≤—å—é...');
    try {
      const previewProcess = require('child_process').spawn('npx', ['astro', 'preview', '--port', '4322', '--host', '0.0.0.0'], {
        cwd: templatePath,
        stdio: 'pipe',
        shell: true
      });

      // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
      await new Promise(resolve => setTimeout(resolve, 3000));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (previewProcess.killed) {
        console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–≤—å—é –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
        return false;
      }

      console.log('‚úÖ –ü—Ä–µ–≤—å—é –∑–∞–ø—É—â–µ–Ω–æ');

      // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      console.log('\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—å—é...');
      try {
        const response = execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:4322', { encoding: 'utf8' });
        if (response.trim() === '200') {
          console.log('‚úÖ –ü—Ä–µ–≤—å—é –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:4322');
        } else {
          console.log(`‚ö†Ô∏è  –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: ${response.trim()}`);
        }
      } catch (error) {
        console.log('‚ùå –ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      }

      // 8. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é
      console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é...');
      previewProcess.kill('SIGTERM');
      await new Promise(resolve => setTimeout(resolve, 1000));

      console.log('‚úÖ –ü—Ä–µ–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return true;

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–≤—å—é: ${error.message}`);
      return false;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é...\n');
  
  const success = await testPreview();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  if (success) {
    console.log('‚úÖ –ü—Ä–µ–≤—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–≤—å—é');
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –°–æ–±—Ä–∞–Ω –ª–∏ —Å–∞–π—Ç (–µ—Å—Ç—å –ª–∏ –ø–∞–ø–∫–∞ dist)');
    console.log('2. –ù–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 4322 –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏');
    console.log('3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —à–∞–±–ª–æ–Ω–µ');
  }
}

main().catch(error => {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}); 