require('dotenv').config();
const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';
const API_TOKEN = process.env.STRAPI_API_TOKEN;

const client = axios.create({
  baseURL: `${STRAPI_URL}/api`,
  headers: {
    'Authorization': `Bearer ${API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testSimpleArticle() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—å–∏...\n');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    const response = await client.post('/content-articles', {
      data: {
        title: 'Test Article',
        slug: 'test-article-' + Date.now(),
        content: 'Test content',
        statusArticles: 'draft'
      }
    });
    
    console.log('‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞!');
    console.log('üìÑ ID:', response.data.data.id);
    console.log('üìã –ü–æ–ª—è:', Object.keys(response.data.data.attributes));
    
    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å populate
    console.log('\nüîç –ü—Ä–æ–±—É–µ–º populate...');
    try {
      const populateResponse = await client.get('/content-articles?populate=*');
      console.log('‚úÖ Populate —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      
      if (populateResponse.data.data.length > 0) {
        const article = populateResponse.data.data[0];
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:', Object.keys(article.attributes));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        const relationFields = ['category', 'author', 'site'];
        relationFields.forEach(field => {
          if (article.attributes.hasOwnProperty(field)) {
            console.log(`‚úÖ –ü–æ–ª–µ ${field}: –Ω–∞–π–¥–µ–Ω–æ`);
          } else {
            console.log(`‚ùå –ü–æ–ª–µ ${field}: –ù–ï –Ω–∞–π–¥–µ–Ω–æ`);
          }
        });
      }
    } catch (populateError) {
      console.log('‚ùå Populate –æ—à–∏–±–∫–∞:', populateError.response?.data);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:');
    console.log('–°—Ç–∞—Ç—É—Å:', error.response?.status);
    console.log('–î–∞–Ω–Ω—ã–µ:', error.response?.data);
  }
}

async function testRelationFields() {
  console.log('\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π...');
  
  const fields = ['category', 'author', 'site'];
  
  for (const field of fields) {
    try {
      const response = await client.get(`/content-articles?populate[${field}]=*`);
      console.log(`‚úÖ –ü–æ–ª–µ ${field}: OK`);
    } catch (error) {
      console.log(`‚ùå –ü–æ–ª–µ ${field}: ${error.response?.data?.error?.message}`);
    }
  }
}

async function main() {
  await testSimpleArticle();
  await testRelationFields();
}

main().catch(console.error); 