require('dotenv').config();
const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';
const API_TOKEN = process.env.STRAPI_API_TOKEN;

const client = axios.create({
  baseURL: `${STRAPI_URL}/api`,
  headers: {
    'Authorization': `Bearer ${API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testPbnSites() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º pbn-sites...\n');
  
  const tests = [
    { name: '–¢–æ–ª—å–∫–æ name', data: { name: 'Test Site 1' } },
    { name: 'name + slug', data: { name: 'Test Site 2', slug: 'test-site-2' } },
    { name: '–° domain', data: { name: 'Test Site 3', slug: 'test-site-3', domain: 'test3.com' } },
    { name: '–° template', data: { name: 'Test Site 4', slug: 'test-site-4', template: 'blog' } },
    { name: '–° statuspbn', data: { name: 'Test Site 5', slug: 'test-site-5', statuspbn: 'draft' } }
  ];
  
  for (const test of tests) {
    try {
      const response = await client.post('/pbn-sites', { data: test.data });
      console.log(`‚úÖ ${test.name}: —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ (ID: ${response.data.data.id})`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞
      if (test.name === 'name + slug') {
        const site = response.data.data;
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:', Object.keys(site.attributes));
      }
      
      break; // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    } catch (error) {
      console.log(`‚ùå ${test.name}: ${error.response?.data?.error?.message || error.response?.status}`);
      if (error.response?.data?.error?.details) {
        console.log(`   –î–µ—Ç–∞–ª–∏:`, error.response.data.error.details);
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∞–π—Ç—ã
  console.log('\nüìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∞–π—Ç—ã:');
  try {
    const response = await client.get('/pbn-sites');
    console.log(`–ù–∞–π–¥–µ–Ω–æ: ${response.data.data.length} —Å–∞–π—Ç–æ–≤`);
    
    response.data.data.forEach((site, index) => {
      const attrs = site.attributes;
      console.log(`${index + 1}. ${attrs.name} (ID: ${site.id})`);
      if (attrs.domain) console.log(`   Domain: ${attrs.domain}`);
      if (attrs.template) console.log(`   Template: ${attrs.template}`);
      if (attrs.statuspbn) console.log(`   Status: ${attrs.statuspbn}`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤:', error.response?.data);
  }
}

testPbnSites().catch(console.error); 