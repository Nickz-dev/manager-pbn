require('dotenv').config();
const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';
const API_TOKEN = process.env.STRAPI_API_TOKEN;

const client = axios.create({
  baseURL: `${STRAPI_URL}/api`,
  headers: {
    'Authorization': `Bearer ${API_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testRelationFields() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–ï–ô –û–¢–ù–û–®–ï–ù–ò–ô\n');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç—å—é –±–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
  console.log('1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç—å—é...');
  try {
    const response = await client.post('/content-articles', {
      data: {
        title: 'Test Relations ' + Date.now(),
        slug: 'test-relations-' + Date.now(),
        content: 'Test content',
        statusarticles: 'draft'
      }
    });
    
    console.log('‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ (ID:', response.data.data.id, ')');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∏ —Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
    const article = response.data.data.attributes;
    console.log('\nüìã –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø –≤ content-articles:');
    Object.keys(article).forEach(field => {
      console.log(`   - ${field}: ${typeof article[field]} = ${article[field]}`);
    });
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error.response?.data);
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω –ø–æ–ª–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π
  console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º populate —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π...');
  
  const relationFields = [
    'category',
    'categories',
    'content_category', 
    'contentCategory',
    'content-category',
    'author',
    'authors',
    'content_author',
    'contentAuthor', 
    'content-author',
    'site',
    'sites',
    'pbn_site',
    'pbnSite',
    'pbn-site'
  ];
  
  for (const field of relationFields) {
    try {
      await client.get(`/content-articles?populate[${field}]=*`);
      console.log(`‚úÖ ${field}: –†–ê–ë–û–¢–ê–ï–¢`);
    } catch (error) {
      console.log(`‚ùå ${field}: ${error.response?.data?.error?.message}`);
    }
  }
  
  // –ü—Ä–æ–±—É–µ–º populate=*
  console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º populate=*...');
  try {
    const response = await client.get('/content-articles?populate=*');
    console.log('‚úÖ populate=* —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    if (response.data.data.length > 0) {
      const article = response.data.data[0].attributes;
      console.log('\nüìã –ü–û–õ–Ø —Å populate=*:');
      Object.keys(article).forEach(field => {
        console.log(`   - ${field}: ${typeof article[field]}`);
        if (article[field] && typeof article[field] === 'object' && article[field].data) {
          console.log(`     ‚Üí –û–¢–ù–û–®–ï–ù–ò–ï! data:`, !!article[field].data);
        }
      });
    }
  } catch (error) {
    console.log('‚ùå populate=* –æ—à–∏–±–∫–∞:', error.response?.data);
  }
}

testRelationFields().catch(console.error); 