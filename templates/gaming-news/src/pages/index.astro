---
import siteData from '../data/site-data.json';

const { site, articles, categories, authors } = siteData;

// –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π - –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
const allArticles = articles || [];
const latestArticles = allArticles
  .filter(article => article && article.title && article.slug)
  .sort((a, b) => {
    const dateA = a.publishedAt ? new Date(a.publishedAt).getTime() : 0;
    const dateB = b.publishedAt ? new Date(b.publishedAt).getTime() : 0;
    return dateB - dateA;
  })
  .slice(0, 9);

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const popularCategories = (categories || []).slice(0, 5);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": site.name,
  "url": `https://${site.domain}`,
  "description": site.description,
  "publisher": {
    "@type": "Organization",
    "name": site.name,
    "url": `https://${site.domain}`
  },
  "potentialAction": {
    "@type": "SearchAction",
    "target": `https://${site.domain}/search?q={search_term_string}`,
    "query-input": "required name=search_term_string"
  }
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Open Graph –¥–∞–Ω–Ω—ã–µ
const ogData = {
  title: site.name,
  description: site.description,
  url: `https://${site.domain}`,
  type: 'website',
  site_name: site.name,
  image: site.og_image || `/images/default-og.jpg`
};
---

<!DOCTYPE html>
<html lang={site.config?.language || 'en'}>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#10b981">
  
  <!-- Primary Meta Tags -->
  <title>{site.name} - {site.description}</title>
  <meta name="title" content={site.name}>
  <meta name="description" content={site.description}>
  <meta name="keywords" content={site.keywords?.join(', ') || ''}>
  <meta name="author" content={site.name}>
  <meta name="robots" content="index, follow">
  <meta name="language" content={site.config?.language || 'en'}>
  
  <!-- Canonical URL -->
  <link rel="canonical" href={`https://${site.domain}`}>
  
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content={ogData.type}>
  <meta property="og:url" content={ogData.url}>
  <meta property="og:title" content={ogData.title}>
  <meta property="og:description" content={ogData.description}>
  <meta property="og:image" content={ogData.image}>
  <meta property="og:site_name" content={ogData.site_name}>
  <meta property="og:locale" content={site.config?.language || 'en_US'}>
  
  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:url" content={ogData.url}>
  <meta property="twitter:title" content={ogData.title}>
  <meta property="twitter:description" content={ogData.description}>
  <meta property="twitter:image" content={ogData.image}>
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
  
  <!-- Tailwind CSS (local build) -->
  <link rel="stylesheet" href="/src/styles/globals.css">
  
  <!-- Preload critical resources -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preload" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap"></noscript>
  
  <!-- Google Analytics -->
  {site.analytics?.googleAnalytics && (
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${site.analytics.googleAnalytics}`}></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '{site.analytics.googleAnalytics}', {
        page_title: '{site.name}',
        page_location: '{ogData.url}'
      });
    </script>
  )}
  
  <!-- Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
    
    .main {
      padding: 3rem 0;
    }
    
    .section-title {
      font-size: 2rem;
      font-weight: 700;
      text-align: center;
      margin-bottom: 2rem;
      color: var(--text-primary);
    }
    
    .section-title::after {
      content: '';
      display: block;
      width: 60px;
      height: 3px;
      background: linear-gradient(90deg, var(--primary-color) 0%, var(--accent-color) 100%);
      margin: 1rem auto 0;
    }
    
    .masonry-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 4rem;
    }
    
    .masonry-item {
      break-inside: avoid;
    }
    
    .article-card-masonry {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: var(--shadow-md);
      transition: all 0.3s ease;
      position: relative;
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    
    .article-card-masonry:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-xl);
    }
    
    .featured-badge {
      position: absolute;
      top: 1rem;
      left: 1rem;
      background: var(--primary-color);
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      z-index: 10;
    }
    
    .article-image-masonry {
      width: 100%;
      height: 200px;
      object-fit: cover;
      display: block;
    }
    
    .article-image-placeholder-masonry {
      width: 100%;
      height: 200px;
      background: linear-gradient(135deg, var(--bg-accent) 0%, var(--bg-secondary) 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      color: var(--text-muted);
    }
    
    .article-content-masonry {
      padding: 1.5rem;
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .article-title-masonry {
      font-size: 1.25rem;
      font-weight: 700;
      margin-bottom: 0.75rem;
      color: var(--text-primary);
      line-height: 1.3;
    }
    
    .article-excerpt-masonry {
      color: var(--text-secondary);
      margin-bottom: 1rem;
      line-height: 1.5;
      flex: 1;
    }
    
    .article-meta-masonry {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: auto;
      padding-top: 1rem;
      border-top: 1px solid var(--border-color);
    }
    
    .article-author-masonry {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .author-avatar-masonry {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: var(--primary-color);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 0.875rem;
    }
    
    .article-date-masonry {
      color: var(--text-muted);
      font-size: 0.875rem;
    }
    
    .categories-section {
      margin-top: 4rem;
    }
    
    .categories-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }
    
    .category-card {
      background: white;
      border: 2px solid transparent;
      border-image: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%) 1;
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .category-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }
    
    .category-card h3 {
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }
    
    .category-card p {
      color: var(--text-secondary);
      line-height: 1.5;
    }
    
    .no-articles {
      text-align: center;
      padding: 4rem 0;
    }
    
    .no-articles h2 {
      font-size: 2rem;
      color: var(--text-primary);
      margin-bottom: 1rem;
    }
    
    .no-articles p {
      color: var(--text-secondary);
      font-size: 1.1rem;
    }
    
    @media (max-width: 768px) {
      .header-content h1 {
        font-size: 2rem;
      }
      
      .section-title {
        font-size: 1.75rem;
      }
      
      .masonry-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }
      
      .categories-grid {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 480px) {
      .container {
        padding: 0 0.75rem;
      }
      
      .header {
        padding: 2rem 0;
      }
      
      .main {
        padding: 2rem 0;
      }
      
      .article-content-masonry {
        padding: 1rem;
      }
      
      .category-card {
        padding: 1.5rem 1rem;
      }
    }
    
    /* Loading states */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }
    
    /* Focus styles for accessibility */
    a:focus,
    button:focus {
      outline: 2px solid var(--primary-color);
      outline-offset: 2px;
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <div class="header-content">
        <h1>üéÆ {site.name}</h1>
        <p>{site.description}</p>
      </div>
    </div>
  </header>

  <main class="main">
    <div class="container">
      {latestArticles.length > 0 ? (
        <>
          <h2 class="section-title">Latest Gaming News</h2>
          <div class="masonry-grid">
            {latestArticles.map((article, index) => (
              <div class="masonry-item">
                <article class="article-card-masonry">
                  <a href={`/articles/${article.slug}`} style="text-decoration: none; color: inherit;">
                    {index === 0 && (
                      <div class="featured-badge">Featured</div>
                    )}
                    {article.featured_image ? (
                      <img 
                        src={article.featured_image} 
                        alt={article.title}
                        class="article-image-masonry"
                        loading="lazy"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                    ) : null}
                    {!article.featured_image && (
                      <div class="article-image-placeholder-masonry">
                        üéÆ No Image
                      </div>
                    )}
                    <div class="article-content-masonry">
                      <h3 class="article-title-masonry">{article.title}</h3>
                      {article.excerpt && (
                        <p class="article-excerpt-masonry">{article.excerpt}</p>
                      )}
                      <div class="article-meta-masonry">
                        <div class="article-author-masonry">
                          <div class="author-avatar-masonry">
                            {(article.author?.name || 'A').charAt(0).toUpperCase()}
                          </div>
                          <span>{article.author?.name || 'Anonymous'}</span>
                        </div>
                        <span class="article-date-masonry">
                          {article.publishedAt ? new Date(article.publishedAt).toLocaleDateString() : 'No date'}
                        </span>
                      </div>
                    </div>
                  </a>
                </article>
              </div>
            ))}
          </div>
        </>
      ) : (
        <div class="no-articles">
          <h2>No articles available</h2>
          <p>Check back soon for new content!</p>
        </div>
      )}

      {popularCategories.length > 0 && (
        <div class="categories-section">
          <h2 class="section-title">Popular Categories</h2>
          <div class="categories-grid">
            {popularCategories.map((category) => (
              <a href={`/categories/${category.slug}`} style="text-decoration: none; color: inherit;">
                <div class="category-card">
                  <h3>{category.name}</h3>
                  <p>Latest news in {category.name.toLowerCase()}.</p>
                </div>
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </main>
</body>
</html> 