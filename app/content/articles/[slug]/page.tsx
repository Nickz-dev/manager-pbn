'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import axios from 'axios'

interface Category {
  id: string
  name: string
  slug: string
  color: string
}

interface Author {
  id: string
  name: string
  email: string
  specialization: string
}

interface PbnSite {
  id: string
  name: string
  url: string
  status: string
}

interface Article {
  id: string
  documentId: string
  title: string
  slug: string
  content: string
  excerpt: string
  featured_image: string
  meta_title: string
  meta_description: string
  statusarticles: string
  published: string | null
  createdAt: string
  updatedAt: string
  publishedAt: string | null
  content_categories: Category[]
  content_author: Author | null
  pbn_site: PbnSite | null
}

export default function ArticleDetailPage() {
  const params = useParams()
  const router = useRouter()
  const slug = params.slug as string

  const [article, setArticle] = useState<Article | null>(null)
  const [categories, setCategories] = useState<Category[]>([])
  const [authors, setAuthors] = useState<Author[]>([])
  const [pbnSites, setPbnSites] = useState<PbnSite[]>([])
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [isEditing, setIsEditing] = useState(false)

  // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [formData, setFormData] = useState({
    title: '',
    slug: '',
    content: '',
    excerpt: '',
    featured_image: '',
    meta_title: '',
    meta_description: '',
    statusarticles: 'draft',
    content_categories: [] as string[],
    content_author: '',
    pbn_site: ''
  })

  useEffect(() => {
    fetchData()
  }, [slug])

  async function fetchData() {
    try {
      setLoading(true)
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é
      const articleRes = await axios.get(`/api/content/articles/${slug}`)
      const articleData = articleRes.data.article
      setArticle(articleData)

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏
      setFormData({
        title: articleData.title || '',
        slug: articleData.slug || '',
        content: articleData.content || '',
        excerpt: articleData.excerpt || '',
        featured_image: articleData.featured_image || '',
        meta_title: articleData.meta_title || '',
        meta_description: articleData.meta_description || '',
        statusarticles: articleData.statusarticles || 'draft',
        content_categories: articleData.content_categories?.map((cat: Category) => cat.id) || [],
        content_author: articleData.content_author?.id || '',
        pbn_site: articleData.pbn_site?.id || ''
      })

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const [categoriesRes, authorsRes, sitesRes] = await Promise.all([
        axios.get('/api/content/categories'),
        axios.get('/api/content/authors'),
        axios.get('/api/sites')
      ])

      setCategories(categoriesRes.data.categories)
      setAuthors(authorsRes.data.authors)
      setPbnSites(sitesRes.data.sites)

    } catch (error: any) {
      console.error('Error fetching article:', error)
      if (error.response?.status === 404) {
        router.push('/content')
      }
    } finally {
      setLoading(false)
    }
  }

  async function handleSave() {
    if (!article) return

    try {
      setSaving(true)

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Strapi
      const strapiData = {
        ...formData,
        content_categories: formData.content_categories.length > 0 ? 
          formData.content_categories.map(id => ({ id })) : 
          null,
        content_author: formData.content_author ? 
          { id: formData.content_author } : 
          null,
        pbn_site: formData.pbn_site ? 
          { id: formData.pbn_site } : 
          null
      }

      await axios.put(`/api/content/articles/${article.documentId}`, { data: strapiData })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await fetchData()
      setIsEditing(false)
      
    } catch (error: any) {
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + (error.response?.data?.error || error.message))
    } finally {
      setSaving(false)
    }
  }

  async function handleDelete() {
    if (!article || !confirm('–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é?')) return

    try {
      await axios.delete(`/api/content/articles/${article.documentId}`)
      router.push('/content')
    } catch (error: any) {
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (error.response?.data?.error || error.message))
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-4xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2 mb-8"></div>
            <div className="space-y-4">
              <div className="h-4 bg-gray-200 rounded"></div>
              <div className="h-4 bg-gray-200 rounded w-5/6"></div>
              <div className="h-4 bg-gray-200 rounded w-4/6"></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!article) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
          <Link href="/content" className="btn-primary">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É</Link>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <Link href="/content" className="text-blue-600 hover:underline mb-2 inline-block">
              ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π
            </Link>
            <h1 className="text-3xl font-bold text-gray-900">
              {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏' : article.title}
            </h1>
          </div>
          <div className="flex space-x-3">
            {!isEditing ? (
              <>
                <button 
                  onClick={() => setIsEditing(true)}
                  className="btn-secondary"
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button 
                  onClick={handleDelete}
                  className="btn-danger"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </>
            ) : (
              <>
                <button 
                  onClick={handleSave}
                  disabled={saving}
                  className={`btn-primary ${saving ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  {saving ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                </button>
                <button 
                  onClick={() => {
                    setIsEditing(false)
                    fetchData() // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                  }}
                  className="btn-secondary"
                >
                  ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
              </>
            )}
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          {isEditing ? (
            /* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
            <div className="space-y-6">
              {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ó–∞–≥–æ–ª–æ–≤–æ–∫ *
                  </label>
                  <input
                    type="text"
                    value={formData.title}
                    onChange={e => setFormData(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Slug
                  </label>
                  <input
                    type="text"
                    value={formData.slug}
                    onChange={e => setFormData(prev => ({ ...prev, slug: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="url-friendly-slug"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={formData.excerpt}
                  onChange={e => setFormData(prev => ({ ...prev, excerpt: e.target.value }))}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                </label>
                <textarea
                  value={formData.content}
                  onChange={e => setFormData(prev => ({ ...prev, content: e.target.value }))}
                  rows={10}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏"
                />
              </div>

              {/* –ú–µ—Ç–∞-–ø–æ–ª—è */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Meta Title
                  </label>
                  <input
                    type="text"
                    value={formData.meta_title}
                    onChange={e => setFormData(prev => ({ ...prev, meta_title: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Meta title –¥–ª—è SEO"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Featured Image URL
                  </label>
                  <input
                    type="url"
                    value={formData.featured_image}
                    onChange={e => setFormData(prev => ({ ...prev, featured_image: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Meta Description
                </label>
                <textarea
                  value={formData.meta_description}
                  onChange={e => setFormData(prev => ({ ...prev, meta_description: e.target.value }))}
                  rows={2}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Meta description –¥–ª—è SEO"
                />
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={formData.statusarticles}
                    onChange={e => setFormData(prev => ({ ...prev, statusarticles: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                    <option value="published">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</option>
                    <option value="archived">–ê—Ä—Ö–∏–≤</option>
                    <option value="ai">AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</option>
                    <option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                  </label>
                  <select
                    multiple
                    value={formData.content_categories}
                    onChange={e => {
                      const selected = Array.from(e.target.selectedOptions, option => option.value)
                      setFormData(prev => ({ ...prev, content_categories: selected }))
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {categories.map(category => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ê–≤—Ç–æ—Ä
                  </label>
                  <select
                    value={formData.content_author}
                    onChange={e => setFormData(prev => ({ ...prev, content_author: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">–ë–µ–∑ –∞–≤—Ç–æ—Ä–∞</option>
                    {authors.map(author => (
                      <option key={author.id} value={author.id}>
                        {author.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    PBN —Å–∞–π—Ç
                  </label>
                  <select
                    value={formData.pbn_site}
                    onChange={e => setFormData(prev => ({ ...prev, pbn_site: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏</option>
                    {pbnSites.map(site => (
                      <option key={site.id} value={site.id}>
                        {site.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          ) : (
            /* –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏ */
            <div className="space-y-6">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
              <div className="flex justify-between items-start">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">{article.title}</h2>
                  <p className="text-gray-600">{article.excerpt}</p>
                </div>
                <span 
                  className="inline-flex px-3 py-1 text-sm font-semibold rounded-full"
                  style={{
                    backgroundColor: 
                      article.statusarticles === 'published' ? '#DEF7EC' :
                      article.statusarticles === 'draft' ? '#FEF3C7' :
                      article.statusarticles === 'archived' ? '#F3F4F6' :
                      article.statusarticles === 'ai' ? '#F3E8FF' :
                      article.statusarticles === 'processing' ? '#FED7AA' :
                      '#F3F4F6',
                    color:
                      article.statusarticles === 'published' ? '#03543F' :
                      article.statusarticles === 'draft' ? '#92400E' :
                      article.statusarticles === 'archived' ? '#374151' :
                      article.statusarticles === 'ai' ? '#581C87' :
                      article.statusarticles === 'processing' ? '#C2410C' :
                      '#374151'
                  }}
                >
                  {article.statusarticles}
                </span>
              </div>

              {/* –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
                <div>
                  <span className="text-sm font-medium text-gray-500">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</span>
                  <div className="mt-1">
                    {article.content_categories?.length > 0 ? (
                      article.content_categories.map(cat => (
                        <span key={cat.id} className="inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded mr-1 mb-1">
                          {cat.name}
                        </span>
                      ))
                    ) : (
                      <span className="text-gray-400">–ù–µ —É–∫–∞–∑–∞–Ω—ã</span>
                    )}
                  </div>
                </div>
                <div>
                  <span className="text-sm font-medium text-gray-500">–ê–≤—Ç–æ—Ä:</span>
                  <div className="mt-1 text-sm">
                    {article.content_author ? article.content_author.name : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                  </div>
                </div>
                <div>
                  <span className="text-sm font-medium text-gray-500">PBN —Å–∞–π—Ç:</span>
                  <div className="mt-1 text-sm">
                    {article.pbn_site ? article.pbn_site.name : '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
                  </div>
                </div>
              </div>

              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
              {article.featured_image && (
                <div>
                  <img 
                    src={article.featured_image} 
                    alt={article.title}
                    className="w-full h-64 object-cover rounded-lg"
                  />
                </div>
              )}

              {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
                <div 
                  className="prose max-w-none"
                  dangerouslySetInnerHTML={{ __html: article.content }}
                />
              </div>

              {/* SEO –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="border-t pt-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">SEO –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className="space-y-3">
                  <div>
                    <span className="text-sm font-medium text-gray-500">Meta Title:</span>
                    <div className="mt-1 text-sm">{article.meta_title || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">Meta Description:</span>
                    <div className="mt-1 text-sm">{article.meta_description || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">Slug:</span>
                    <div className="mt-1 text-sm font-mono">{article.slug || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                  </div>
                </div>
              </div>

              {/* –î–∞—Ç—ã */}
              <div className="border-t pt-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="text-gray-500">–°–æ–∑–¥–∞–Ω–æ:</span>
                    <div className="mt-1">{new Date(article.createdAt).toLocaleString()}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                    <div className="mt-1">{new Date(article.updatedAt).toLocaleString()}</div>
                  </div>
                  <div>
                    <span className="text-gray-500">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</span>
                    <div className="mt-1">
                      {article.publishedAt ? new Date(article.publishedAt).toLocaleString() : '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
} 